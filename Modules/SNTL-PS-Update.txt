Function Update-DellPackages {
    <#
	.SYNOPSIS
		Uses the CLI version of Dell Command | Update to install any missing drivers/firmwares/Bios and update existing ones.
		There are no parameters to use.
	.LINK
		https://www.dell.com/support/kbdoc/en-us/000177325/dell-command-update
	.EXAMPLE
		Update-DellPackages
	#>

    Function Install-DCU {
        #Install the latest version
        Stop-Process -Name DellCommandUpdate -Force -ErrorAction SilentlyContinue
        winget install Dell.CommandUpdate.Universal --force --accept-source-agreements --accept-package-agreements
    }

    Write-Host "Dell Updates"
    $Manufacturer = (Get-CimInstance -Class Win32_ComputerSystem).Manufacturer
    If ( $Manufacturer -like "*Dell*") {
        If (Get-Command winget) {
            Write-Host "Updating App Installer"
            winget upgrade "App Installer" --accept-source-agreements --accept-package-agreements
        }
        Else {
            Install-WinGet
        }

        Write-Host "Checking if 'Dell Command Update' is current."

        #Remove any Windows 10 "Apps"
        Get-ProvisionedAppPackage -Online -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like "*Dell*Update*" } | Remove-ProvisionedAppPackage -Online
        Get-AppxPackage "*Dell*Update*" -ErrorAction SilentlyContinue | Remove-AppxPackage
        Get-Package "Dell*Windows 10" -ErrorAction SilentlyContinue | Uninstall-Package -AllVersions -Force
    
        If (Get-AppxPackage *Dell*Update*) {
            $apps = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | Get-ItemProperty | Where-Object { $_.DisplayName -like "Dell*Update*" } | Select-Object -Property DisplayName, UninstallString
            ForEach ($ver in $apps) {
                If ($ver.UninstallString) {
                    $uninst = $ver.UninstallString
                    Write-Host Uninstalling: $ver.DisplayName
                    Start-Process cmd -ArgumentList "/c $uninst /quiet /norestart" -NoNewWindow -Wait -PassThru
                }
            }
        }

        #Compare version numbers of any remaining installed version.
        $DCUInstalledVersion = (Get-Package -Provider Programs -IncludeWindowsInstaller -Name "Dell Command | Update" -ErrorAction SilentlyContinue).Version
        $DCUAvailableVersion = winget show Dell.CommandUpdate.Universal #Gets all results
        $DCUAvailableVersion = ($DCUAvailableVersion | Select-String -Pattern "Version: " -SimpleMatch).Line
        $DCUAvailableVersion = $DCUAvailableVersion.split(" ", [System.StringSplitOptions]::RemoveEmptyEntries)[1]

        If (-not $DCUInstalledVersion) {
            Write-Host "'Dell Command Update' is not installed, installing now."
            Install-DCU
        }
        ElseIf ($DCUInstalledVersion -ne $DCUAvailableVersion) {
            Write-Host "'Dell Command Update' is not current. Updating from version $DCUInstalledVersion to $DCUAvailableVersion."

            #Remove any programs listed through "Add and remove programs"
            $DCUInstalled = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*Dell*Update*" }
            If ($DCUInstalled) {
                $DCUInstalled.Uninstall()
            }
            Install-DCU
        }
        ElseIf ($DCUInstalledVersion -eq $DCUAvailableVersion) {
            Write-Host "'Dell Command Update' is current."
        }

        Dell.CommandUpdate.Universal
        #Configure and run Dell Command Update
        Stop-Process -Name DellCommandUpdate -Force -ErrorAction SilentlyContinue

        $DCUx86 = Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Dell\CommandUpdate\dcu-cli.exe"
        $DCUx64 = Join-Path -Path $Env:ProgramFiles -ChildPath "Dell\CommandUpdate\dcu-cli.exe"

        If (Test-Path $DCUx86) {
            & $DCUx86 /configure -silent -autoSuspendBitLocker=enable -userConsent=disable -scheduleManual 
            & $DCUx86 /applyUpdates -reboot=disable
        }
        ElseIf (Test-Path $DCUx64) {
            & $DCUx64 /configure -silent -autoSuspendBitLocker=enable -userConsent=disable -scheduleManual 
            & $DCUx64 /applyUpdates -reboot=disable
        }
        Else { Write-Error "Dell Command Update CLI not found." }

    }
    Else { Write-Host "This is not a Dell Computer" }
    Write-Host "`n> End of Dell Updates"
}

Function Update-Windows {
    <#
	.SYNOPSIS
        Calls a windows update script to ensure Windows is fully updated.
    .LINK
        https://raw.githubusercontent.com/AmbitionsTechnologyGroup/ATG-PS-Functions/master/Scripts/Windows-Update/UpdateWindows.txt
	.EXAMPLE
		Update-Windows -ScriptURL "https://example.com/scripts/windows-update.txt"
	#>

    Param (
        [Parameter(Mandatory = $False)]
        [Switch] $NoSofware,
		
        [Parameter(Mandatory = $False)]
        [Switch] $NoDrivers
    )

    Begin {
        Write-Host "Windows Updates"
        Set-ExecutionPolicy Bypass -Scope Process -Force
        $WUService = Get-Service wuauserv

        # Start Windows Update service if stopped
        if (!($WUService.Status -eq "Stopped")) {
            Write-Host "Starting the Windows update Service | Waiting for 10 seconds..."
            Start-Service wuauserv
            Start-Sleep -Seconds 10
        }
    }

    Process {
        Write-Host "Installing Windows Updates"

        Function RegisterWindowsUpdates {
            Write-Host "Checking Microsoft Update Service"
            If ((Get-WUServiceManager).Name -like "Microsoft Update") {
                Write-Host "Microsoft Update Service found, it's good to go."
            }
            else {
                Write-Host "Microsoft Update Service not found, registering it."
                Add-WUServiceManager -ServiceID 7971f918-a847-4430-9279-4a52d1efe18d -Confirm:$false
            }
        }

        Write-Host "Checking WinGet Installation"
        # Check if WinGet already installed
        If (-not (Get-AppxPackage *DesktopAppInstaller*)) {
            # Install WinGet
            Write-Host "WinGet is not installed. Installing WinGet."
            Add-AppxPackage -RegisterByFamilyName -MainPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe
            Write-Host "Installed Microsoft App Installer" -ForegroundColor Green
        }

        Write-Host "Checking PowerShell version."
        If ($PSVersionTable.PSVersion.Major -lt "5") {
            Write-Host "Powershell needs an update, installing now"
            winget install --id Microsoft.Powershell --source winget --accept-source-agreements --accept-package-agreements
            Write-Host "Reboot computer and run script again"
        }
        Else {
            If ((Get-Command Get-WUInstall -ErrorAction SilentlyContinue) -And ((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Major -lt "2")) {
                $Module = Get-Module -Name PSWindowsUpdate
                Write-Host "Removing an out of date PSWindowsUpdate"
                Uninstall-Module $Module.Name
                Remove-Module $Module.Name
                Remove-Item $Module.ModuleBase -Recurse -Force
            }

            If (-Not (((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Major -ge "2") -and ((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Minor -ge "1"))) {
                Write-Host "Attempting automatic installation of PSWUI 2.2.0.2"
                Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.208 -Force -ErrorAction SilentlyContinue
                Install-Module -Name PSWindowsUpdate -MinimumVersion 2.2.0.2 -Force -ErrorAction SilentlyContinue
                RegisterWindowsUpdates
                If (-Not (((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Major -ge "2") -and ((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Minor -ge "1"))) {
                    Write-Host "Auto install Failed, Attempting Manual installation of PSWUI 2.2.0.2"
                    New-Item -ItemType Directory -Force -Path 'C:\IT' -ErrorAction Stop
			        (New-Object System.Net.WebClient).DownloadFile('https://psg-prod-eastus.azureedge.net/packages/pswindowsupdate.2.2.0.2.nupkg', 'C:\IT\pswindowsupdate.2.2.0.2.zip')
                    New-Item -ItemType Directory -Force -Path 'C:\Windows\System32\WindowsPowerShell\v1.0\Modules\PSWindowsUpdate\2.2.0.2' -ErrorAction Stop
                    Expand-Archive -LiteralPath 'C:\IT\pswindowsupdate.2.2.0.2.zip' -DestinationPath 'C:\Windows\System32\WindowsPowerShell\v1.0\Modules\PSWindowsUpdate\2.2.0.2' -ErrorAction Stop
                    Import-Module PSWindowsUpdate -ErrorAction Stop
                    RegisterWindowsUpdates
                }
            }

            If (((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Major -ge "2") -and ((Get-Command Get-WUInstall -ErrorAction SilentlyContinue).Version.Minor -ge "1")) {
                Write-Host "PSWindowsUpdate is installed"
                If ($NoDrivers -ne $True) {
                    Write-Host "Checking for DRIVER Updates..."
                    Get-WUInstall -MicrosoftUpdate -AcceptAll -Install -UpdateType Driver -IgnoreReboot -ErrorAction SilentlyContinue -Verbose
                }
                If ($NoSoftware -ne $True) {
                    Write-Host "Checking for SOFTWARE Updates..."
                    Get-WUInstall -MicrosoftUpdate -AcceptAll -Install -UpdateType Software -IgnoreReboot -ErrorAction SilentlyContinue -Verbose
                }
            }
            Else {
                Write-Host "PSWindowsUpdate is failing to install, please investigate" -ForegroundColor Red
            }
        }
        Write-Host "End of Install Windows Updates"
    }
}